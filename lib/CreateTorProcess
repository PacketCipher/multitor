#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: CreateTorProcess()
#
# Description:
#   It creates tor processes.
#
# Usage:
#   CreateTorProcess "username" "num" "num"
#
# Examples:
#   CreateTorProcess ${user_name} ${socks_port_number} ${control_port_number}
#

function CreateTorProcess() {

  local _FUNCTION_ID="CreateTorProcess"
  local _STATE=0

  local _arg_uname="$1"
  local _arg_socks="$2"
  local _arg_control="$3"

  # shellcheck disable=SC2154
  local _proc_dir="${_multitor_directory}/${_arg_socks}"
  local _torrc_config="${_proc_dir}/${_arg_socks}.torrc"

  # shellcheck disable=SC2034
  local _tport_state=0

  # We create a directory for the new tor process.
  CreateTorDirectory

  # shellcheck disable=SC2154
  local _torrc_template="${_tml}/torrc-template.cfg"

  # Copy the template to the process-specific torrc file
  if cp "${_torrc_template}" "${_torrc_config}"; then
    _logger "info" \
      "${_FUNCTION_ID}()" \
      "copied torrc template to ${_torrc_config}"
  else
    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "failed to copy torrc template to ${_torrc_config}"
    return 1 # Or handle error appropriately
  fi

  # Append dynamic configurations
  {
    echo "" # Add a newline for separation
    echo "HashedControlPassword ${_pass_hash}"
    echo "SocksPort ${_arg_socks}"
    echo "ControlPort ${_arg_control}"
    echo "PidFile ${_proc_dir}/${_arg_socks}.pid"
    echo "DataDirectory ${_proc_dir}"
    echo "Log notice file /var/log/tor/notices_${_arg_socks}.log"
  } >> "${_torrc_config}"
  _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then
    _logger "info" \
      "${_FUNCTION_ID}()" \
      "appended dynamic configurations to ${_torrc_config}"
  else
    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "failed to append dynamic configurations to ${_torrc_config}"
    return 1 # Or handle error appropriately
  fi

  # shellcheck disable=SC2154
  chmod 0400 "${_torrc_config}" >>"$_log_stdout" 2>&1 && \
  chown "${_arg_uname}:${_arg_uname}" "${_torrc_config}" >>"$_log_stdout" 2>&1
  _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "change permission and owner correctly"

  else

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "not changed permission and owner correctly"

  fi

  # Start Tor with the generated torrc file
  # Options previously passed as command line arguments are now in the torrc file
  # shellcheck disable=SC2024
  sudo -u "$_arg_uname" tor -f "${_torrc_config}" >>"$_log_stdout" 2>&1 ; _kstate="$?"

  if [[ $_kstate -eq 0 ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "create process: '${_arg_socks}.pid'"

    _tor_processes_done=$((_tor_processes_done + 1))

  else

    _logger "warn" \
      "${_FUNCTION_ID}()" \
      "no process was created"

    _tor_processes_fail=$((_tor_processes_fail + 1))

  fi

  unset _kstate

  return $_STATE

}
