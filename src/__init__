#!/usr/bin/env bash

# shellcheck shell=bash

################################################################################
######################### Main function (script init) ##########################
################################################################################

function __main__() {

  local _FUNCTION_ID="__main__"
  local _STATE="0"

  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)

  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="${_rel}/log"
  # shellcheck disable=SC2154
  readonly _log_file="${_init_name}.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"

  # We check if we are a root user.
  if [[ "$EUID" -ne 0 ]] ; then

    printf "EUID is not equal 0 (no root user)\\n"
    _exit_ "1"

  fi

  # Path to import file.
  # shellcheck disable=SC2154
  readonly _import_path="${_src}/import"

  # External configuration file (-c|--config script param).
  config=""
  load_state="0"

  # Declaration of output variables (--debug and --verbose params).
  stdout_mode=""
  verbose_mode="false"
  # Enable/disable output colors.
  # shellcheck disable=SC2034
  s_color="true"

  # Declaration of total execution time.
  time_tracking="false"
  export _cmdtime_state="0"

  # Create multitor directory.
  readonly _multitor_directory="/var/lib/multitor"

  # We place here used commands at script runtime, as strings to anything
  # unnecessarily run.
  # Moved the command check to after getopt parsing, so we know proxy_type.
  # Default essential commands:
  local essential_commands=(basename dirname stat ps date grep cut sed awk chown \
                           chmod mkdir pidof tor sudo nc kill)

  # If you intend to specify the full path to the command we do it like:
  # readonly exec_gzip="/bin/gzip"

  if [[ "$time_tracking" == "true" ]] ; then
    _begtime=$(date +%s) ; fi

  # shellcheck disable=SC2154
  _logger "init" \
    "init '${_init_name}' in '${_init_directory}'" && \
  _logger "info" \
    "__init_params[] = (${__init_params[*]})," \
    "__script_params[] = (${__script_params[*]})"

  # Include import file.
  _load "null" "$_import_path"

  # Source our custom library files
  # Note: CheckConn (for local port checking) is sourced via _load from src/import
  # shellcheck disable=SC1090,SC1091
  # source "${_lib}/CheckTorHealth"     # For the new internet connectivity health check
  # shellcheck disable=SC1090,SC1091
  # source "${_lib}/RestartTorInstance" # For restarting Tor instances


  # Specifies the call parameters of the script, the exact description
  # can be found in _help_ and file README.md.
  local _short_opt="i:ksnu:"
  local _long_opt="help,debug,verbose,init:,kill,show-id,new-id,user:,socks-port:,control-port:,proxy:,haproxy"

  _GETOPT_PARAMS=$(getopt -o "${_short_opt}" --long "${_long_opt}" \
                   -n "${_init_name}" -- "${__script_params[@]}")

  # With this structure, in the case of problems with the parameters placed
  # in the _GETOPT_PARAMS variable we finish the script. Keep this in mind
  # because it has some consequences - the __main __() function will not be
  # executed.

  # Ends an error if the parameter or its argument is not valid.
  _getopt_state="$?"
  if [ "$_getopt_state" != 0 ] ; then
    _exit_ "1"
  # Ends if no parameter is specified.
  elif [[ "${#__script_params[@]}" -eq 0 ]] ; then
    _exit_ "0"
  fi

  eval set -- "$_GETOPT_PARAMS"
  while true ; do

    case $1 in

      --help)

        _help_

        shift ; _exit_ "0" ;;

      --debug)

        export stdout_mode="debug"

        shift ;;

      --verbose)

        export verbose_mode="true"

        shift ;;

      -i|--init)

        export init_state="1"

        export init_number="${2}"

        shift 2 ;;

      -k|--kill)

        export kill_state="1"

        export kill_status="0"

        shift ;;

      -s|--show-id)

        export show_id_state="1"

        shift ;;

      -n|--new-id)

        export new_id_state="1"

        shift ;;

      -u|--user)

        export user_state="1"

        export user_name="${2}"

        shift 2 ;;

      --socks-port)

        export socks_port_state=1

        export socks_port_number="${2}"

        shift 2 ;;

      --control-port)

        export control_port_state=1

        export control_port_number="${2}"

        shift 2 ;;

      --proxy)

        export proxy_state=1

        export proxy_type="${2}"

        # Ensure proxy_type is converted to lowercase for consistent checking
        proxy_type=$(echo "$proxy_type" | tr '[:upper:]' '[:lower:]')

        shift 2 ;;

      # No --custom-lb specific flag, it's a value for --proxy
      # --custom-lb was added to _long_opt to ensure getopt recognizes it if someone tries to use it as a flag by mistake,
      # but it won't have a case here. The value "custom_lb" for --proxy will be handled by proxy_type logic.

      --haproxy)

        export frontend_state=1

        export frontend_type="haproxy"

        shift 2 ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"

        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

  done

  # If you run the script in debug mode, the information
  # will be displayed on the screen from this point.
  if [[ "$stdout_mode" == "debug" ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "starting debug mode"

  fi

  # Dynamically build the list of commands to check based on proxy_type
  local commands_to_check=("${essential_commands[@]}")
  if [[ "$proxy_state" -eq 1 ]] ; then
    if [[ "$proxy_type" == "socks" || "$frontend_type" == "haproxy" || "$proxy_type" == "polipo" || "$proxy_type" == "privoxy" ]] ; then
      commands_to_check+=("haproxy")
    fi
    if [[ "$proxy_type" == "polipo" ]] ; then
      # Polipo isn't in the original commands array, but if it were a distinct binary:
      # commands_to_check+=("polipo")
      true # Assuming polipo might be covered by other checks or not a direct binary check
    fi
    if [[ "$proxy_type" == "privoxy" ]] ; then
      commands_to_check+=("privoxy")
    fi
    # "custom_lb" does not add new binary dependencies to check here beyond python3 (handled by script execution) and tor.
  elif [[ -z "$proxy_state" || "$proxy_state" -eq 0 ]] ; then
    # No proxy, or proxy not haproxy/privoxy. Check for haproxy and privoxy anyway,
    # as the original script did, unless we want to be very minimal.
    # For safety and closer original behavior when no proxy or specific non-HAProxy proxy is chosen:
    commands_to_check+=("haproxy" "privoxy")
  fi

  # Stores the names of the missing commands.
  local missing_hash=()
  local missing_counter="0"

  for i in "${commands_to_check[@]}" ; do
    if [[ ! -z "$i" ]] ; then
      hash "$i" >/dev/null 2>&1 ; state="$?"
      if [[ "$state" -ne 0 ]] ; then
        missing_hash+=("$i")
        ((missing_counter++))
      fi
    fi
  done

  if [[ "$missing_counter" -gt 0 ]] ; then
    printf "Error: Required command(s) not found in PATH: %s\\n" "${missing_hash[*]}" >&2
    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "Required command(s) not found in PATH: ${missing_hash[*]}"
    # _exit_ "1" # _logger stop will exit
  fi

  # Running tasks before start user functions.
  _before_init

  ################################# USER SPACE #################################
  # ````````````````````````````````````````````````````````````````````````````
  # Put here all your variable declarations, function calls
  # and all the other code blocks.

  # In this section we add external file (for -c|--config script param).
  if [[ "$load_state" -eq 1 ]] ; then _load "head" "$config" ; fi

  # shellcheck disable=SC2034
  # Generate random value.
  _random=$(date +"%s")

  # Array that stores the names of variables used that are part of the script
  # call parameters (_GETOPT_PARAMS). Useful when checking whether all
  # or selected parameters without which the script can not work properly
  # have been used. Do not add the load_state variable to the _opt_values array,
  # which is supported above.
  _opt_values=()

  local _tproc=""
  local _tor_processes_done=0
  local _tor_processes_fail=0
  local _tor_processes=0

  local _pass_gen
  local _pass_gen_ha
  local _pass_hash

  # Array to store configurations of running Tor instances for health monitoring
  declare -a _running_tor_configs=()

  local _num='^[0-9]+$'

  local _proxy_list=("polipo" "privoxy" "hpts" "node")

  # Checking whether the variable value is a numeric value.
  if [[ "$init_number" =~ $_num ]] || \
     [[ "$socks_port_number" =~ $_num ]] || \
     [[ "$socks_port_number" == "all" ]] || \
     [[ "$control_port_number" =~ $_num ]] || \
     [[ "$control_port_number" == "all" ]] ; then

    # shellcheck disable=SC2034
    _ports_limit=$((65536 - init_number))

    # shellcheck disable=SC2154
    if [[ "$init_state" -eq 1 ]] && [[ "$init_number" -le 0 ]] ; then

      _sprintf "stop" "init_number is less or equal 0"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "init_number is less then or equal 0"

    elif [[ "$socks_port_number" -ne "all" ]] || \
         [[ "$control_port_number" -ne "all" ]] ; then

      if [[ "$socks_port_state" -eq 1 && "$socks_port_number" -le 1023 ]] ; then

        _sprintf "stop" "value is less then or equal 1023"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "value is less or equal 1023"

      elif [[ "$control_port_state" -eq 1 && "$control_port_number" -le 1023 ]] ; then

        _sprintf "stop" "value is less then or equal 1023"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "value is less or equal 1023"

      elif [[ "$socks_port_state" -eq 1 && "$socks_port_number" -ge 65536 ]] ; then

        _sprintf "stop" "value is equal or grather then 65536"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "value is equal or grather then 65536"

      elif [[ "$socks_port_state" -eq 1 && "$control_port_number" -ge 65536 ]] ; then

        _sprintf "stop" "value is equal or grather then 65536"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "value is equal or grather then 65536"

      elif [[ "$socks_port_number" -gt "$_ports_limit" ]] || \
           [[ "$control_port_number" -gt "$_ports_limit" ]] ; then

        _sprintf "stop" "too many set processes"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "too many set processes"

      elif [[ "$socks_port_number" -eq "$control_port_number" ]] ; then

        _sprintf "stop" "value mismatch"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "value mismatch"

      fi

    fi

  else

    if [[ "$kill_state" -eq 1 ]] ; then

      true

    else

      _sprintf "stop" "no numeric value"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "no numeric value"

    fi

  fi

  # Checking if the user exists.
  if [[ "$user_state" -eq 1 ]] ; then

    if ! id "$user_name" >/dev/null 2>&1 ; then

      _sprintf "stop" "incorrect user"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "incorrect user"

    fi

  fi

  # Checking if proxy is set.
  if [[ "$proxy_state" -eq 1 ]] ; then

    # Add "custom_lb" to the list of allowed proxy types
    if [[ "$proxy_type" == "socks" ]] || \
       [[ "$proxy_type" == "custom_lb" ]] || \
       [[ " ${_proxy_list[*]} " =~ $proxy_type ]] ; then

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "correct proxy type: '$proxy_type'"

    else

      _sprintf "stop" "incorrect proxy type"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "incorrect proxy type"

    fi

  fi

  # Checking if proxy is set for '--haproxy' param.
  if [[ "$frontend_state" -eq 1 ]] ; then

    if [[ "$proxy_state" -ne 1 ]] ; then

      _sprintf "stop" "not set '--proxy' param"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "not set '--proxy' param"

    fi

  fi

  # We set the value of the variable depending on the call option.
  if [[ "$init_state" -eq 1 ]] ; then

    local _opt_values=("init_state" "init_number" \
                       "user_state" "user_name" \
                       "socks_port_state" "socks_port_number" \
                       "control_port_state" "control_port_number")

  elif [[ "$kill_state" -eq 1 ]] ; then

    local _opt_values=("kill_state")

  elif [[ "$show_id_state" -eq 1 ]] || [[ "$new_id_state" -eq 1 ]] ; then

    local _opt_values=("socks_port_state" "socks_port_number")

  else

    _sprintf "stop" "one of the required parameters was not found"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "one of the required parameters was not found"

  fi

  # Checking the value of the variables (if they are unset or empty):
  #   - variables for call parameters
  #   - variables from the additional configuration files
  if [[ "${#_opt_values[@]}" -ne 0 ]] ; then

    for i in "${_opt_values[@]}" ; do

      _i="" ; eval _i='$'"$i"

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "$i: '$_i'"

      if [[ -z "$_i" ]] ; then

        _sprintf "stop" "error of argument value: '$i' is unset or empty"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "error of argument value: '$i' is unset or empty"

      fi

    done

  fi

  if [[ "$init_state" -eq 1 ]] ; then

    # First, we remove current processes.
    # _tor_processes=($(pidof tor))
    IFS=" " read -r -a _tor_processes <<< "$(pidof "tor")"

    if [[ ${#_tor_processes[@]} -ne 0 ]] ; then

      for _tpr in "${_tor_processes[@]}" ; do

        # In this case, we can search for a specific identifier (${_tpr}).
        # shellcheck disable=SC2009
        _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$_tpr")

        if [[ -z "$_tproc" ]] ; then

          _logger "warn" \
            "${_FUNCTION_ID}()" \
            "not found or unknown tor process"

        else

          DestroyProcess "${_tpr}"

        fi

      done

    else

      _logger "warn" \
        "${_FUNCTION_ID}()" \
        "not found tor processes: ${_tpr}"

    fi

    # Removed all multitor process data directory.
    find ${_multitor_directory}/* -delete >>"$_log_stdout" 2>&1

    # Generate random password.
    # Does storing the password in this form is security issue?
    # shellcheck disable=SC2034
    _pass_gen=$(< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)
    # shellcheck disable=SC2034
    _pass_hash=$(sudo -u "$user_name" tor --hash-password "$_pass_gen" 2>&1 | grep "^16:")

    if [[ "$proxy_state" -eq 1 ]] ; then

      # shellcheck disable=SC2034,SC2154
      local _tml_ha0="${_tml}/haproxy-template.cfg"
      # shellcheck disable=SC2034,SC2154
      local _tml_po0="${_tml}/${proxy_type}-template.cfg"

      # shellcheck disable=SC2034,SC2154
      local _tml_ha1="${_etc}/haproxy.cfg"
      # shellcheck disable=SC2034,SC2154
      local _tml_po1="${_etc}/${proxy_type}.cfg"

      for _tfd in "$_tml_ha1" "$_tml_po1" ; do

        # shellcheck disable=SC2154
        if [[ -e "$_tfd" ]] ; then

          rm -fr "${_tfd}"

        fi

      done

      # Updated auth for HAProxy template configuration file.

      # shellcheck disable=SC2154
      cp "${_tml_ha0}" "${_tml_ha1}"

      # shellcheck disable=SC2034
      _pass_gen_ha=$(< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 1)

      sed -i "s/__PASSWORD__/$_pass_gen_ha/g" "${_tml_ha1}"

      unset _pass_gen_ha

      _proxy_ports=()

    else

      # Flush etc/ directory.
      rm -fr "${_etc:?}"/*

    fi

    for i in $(seq 0 $((init_number - 1))) ; do

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "socks_port_number: '$socks_port_number', control_port_number: '$control_port_number'"

      CreateTorProcess "${user_name}" "${socks_port_number}" "${control_port_number}" "${i}"
      local _create_status=$?

      if [[ $_create_status -eq 0 ]]; then
        # Store the configuration for health monitoring if Tor process started successfully
        _running_tor_configs+=("${user_name} ${socks_port_number} ${control_port_number}")
        _logger "info" \
          "${_FUNCTION_ID}()" \
          "Stored config for SOCKS ${socks_port_number} for health monitoring."
      else
        _logger "warn" \
          "${_FUNCTION_ID}()" \
          "Tor process for SOCKS ${socks_port_number} failed to start. Not adding to health monitoring."
      fi

      # For proxy:
      _proxy_ports+=("$socks_port_number")

      # In this case, we can search for a specific identifier (${socks_port_number}).
      # shellcheck disable=SC2009
      _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$socks_port_number")

      # We get process information and display it on the screen.
      GetTorProcess

      # shellcheck disable=SC2154
      if [[ "$socks_port_number" == "all" ]] ; then

        _tor_pid_status="true"

        if [[ "$verbose_mode" == "true" ]] ; then

          echo
          OutputGen

        fi

      elif [[ "$socks_port_number" -eq "$_tor_proc_socks" ]] ; then

        _tor_pid_status="true"

        if [[ "$verbose_mode" == "true" ]] ; then

          echo
          OutputGen

        fi

      else

        _tor_pid_status="false"

        printf "    \\e[1;30msocks_port\\e[m: \\e[1;39m%s\\e[m\\n" "$_tor_proc_socks"
        printf "        \\e[1;30mstatus\\e[m: \\e[1;31m%s\\e[m\\n" "$_tor_pid_status"

      fi

      socks_port_number=$((socks_port_number + 1))
      control_port_number=$((control_port_number + 1))

    done

    _proxy_processes_list=()

    # shellcheck disable=SC2034
    # Manages proxy processes stack for haproxy, polipo, privoxy.
    for _proc in "haproxy" "${_proxy_list[@]}" ; do

      CheckProxyProcess "${_proc}" # This populates _proxy_processes_list

    done

    # shellcheck disable=SC2154
    for _hproc in "${_proxy_processes_list[@]}" ; do # This kills haproxy, polipo, privoxy based on PIDs found

      DestroyProcess "${_hproc}"

    done

    local _custom_lb_active=false
    if [[ "$proxy_state" -eq 1 ]] ; then

      if [[ "$proxy_type" == "custom_lb" ]] ; then
        # Start the API server in the background
        python3 "${_lib}/api_server.py" &
        # Source and call CreateCustomLbProcess
        # shellcheck disable=SC1090,SC1091
        source "${_lib}/CreateCustomLbProcess"
        CreateCustomLbProcess
        if [[ $? -eq 0 ]]; then
          _custom_lb_active=true
          # CreateCustomLbProcess logs success/failure and PID.
          # For _proxy_processes_list, if custom_lb.py PID needs to be there for other functions,
          # CreateCustomLbProcess should add it or return it.
          # For now, _custom_lb_active flag is enough for status message.
        else
          _custom_lb_active=false
        fi
      else
        # Original HAProxy/Polipo/Privoxy logic
        CreateProxyProcess
        # CheckProxyProcess for haproxy, polipo, privoxy will populate _proxy_processes_list
        # This list is used below to determine if these proxies are running.
        for _proc in "haproxy" "${_proxy_list[@]}" ; do
          CheckProxyProcess "${_proc}"
        done
      fi
    fi


    printf "\\n     Set processes: \\e[0;39m%d\\e[m\\n" "$init_number"
    printf "           Created: \\e[0;32m%d\\e[m\\n" "$_tor_processes_done"
    printf "       Not created: \\e[0;31m%s\\e[m\\n" "$_tor_processes_fail"
    printf "  Control password: \\e[2;38m%s\\e[m\\n\\n" "$_pass_gen"

    # shellcheck disable=SC2154
    # Update status message
    if [[ "$proxy_state" -eq 1 ]] ; then
      if [[ "$proxy_type" == "custom_lb" ]] ; then
        if [[ "$_custom_lb_active" == true ]] ; then
          printf "       Proxy state: \\e[2;32m%s\\e[m (custom_lb » Tor SOCKS)\\n\\n" "running"
        else
          printf "       Proxy state: \\e[2;31m%s\\e[m (custom_lb failed to start)\\n\\n" "failed"
        fi
      elif [[ ${#_proxy_processes_list[@]} -ne 0 ]] ; then # Original HAProxy/etc check for other proxy types
        if [[ "$proxy_type" == "socks" ]] ; then
          printf "       Proxy state: \\e[2;32m%s\\e[m (haproxy » %s)\\n\\n" "running" "$proxy_type"
        elif [[ "$frontend_type" == "haproxy" ]] ; then
          printf "       Proxy state: \\e[2;32m%s\\e[m (haproxy » %s » socks)\\n\\n" "running" "$proxy_type"
        else
          printf "       Proxy state: \\e[2;32m%s\\e[m (%s » haproxy/tor » socks)\\n\\n" "running" "$proxy_type"
        fi
      else # This 'else' means proxy_state was 1, not custom_lb, and _proxy_processes_list was empty
        printf "       Proxy state: \\e[2;31m%s\\e[m (proxy init failed for %s)\\n\\n" "failed" "$proxy_type"
      fi
    else # This 'else' is for when proxy_state is NOT 1 (i.e., --proxy not used)
      printf "       Proxy state: \\e[2;31m%s\\e[m (only tor)\\n\\n" "disable"
    fi

    # Unset password variables.
    unset _pass_gen ; unset _pass_hash

  elif [[ "$kill_state" -eq 1 ]] ; then

    # First, we remove current processes.
    # _tor_processes=($(pidof tor))
    IFS=" " read -r -a _tor_processes <<< "$(pidof "tor")"

    if [[ ${#_tor_processes[@]} -ne 0 ]] ; then

      for _tpr in "${_tor_processes[@]}" ; do

        # In this case, we can search for a specific identifier (${_tpr}).
        # shellcheck disable=SC2009
        _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$_tpr")

        if [[ -z "$_tproc" ]] ; then

          _logger "warn" \
            "${_FUNCTION_ID}()" \
            "not found or unknown tor process"

        else

          DestroyProcess "${_tpr}"

          kill_status="1"

        fi

      done

    else

      _logger "warn" \
        "${_FUNCTION_ID}()" \
        "not found tor processes: ${_tpr}"

    fi

    # Removed all multitor process data directory.
    find ${_multitor_directory}/* -delete >>"$_log_stdout" 2>&1

    # shellcheck disable=SC2034,SC2154
    local _tml_ha0="${_tml}/haproxy-template.cfg"
    # shellcheck disable=SC2034,SC2154
    local _tml_po0="${_tml}/${proxy_type}-template.cfg"

    # shellcheck disable=SC2034,SC2154
    local _tml_ha1="${_etc}/haproxy.cfg"
    # shellcheck disable=SC2034,SC2154
    local _tml_po1="${_etc}/${proxy_type}.cfg"

    for _tfd in "$_tml_ha1" "$_tml_po1" ; do

      # shellcheck disable=SC2154
      if [[ -e "$_tfd" ]] ; then

        rm -fr "${_tfd}"

        kill_status="1"

      fi

    done

    # Flush etc/ directory.
    rm -fr "${_etc:?}"/*

    # shellcheck disable=SC2034
    # Manages proxy processes stack.
    for _proc in "haproxy" "${_proxy_list[@]}" ; do

      CheckProxyProcess "${_proc}"

    done

    # shellcheck disable=SC2154
    for _hproc in "${_proxy_processes_list[@]}" ; do

      DestroyProcess "${_hproc}"

      kill_status="1"

    done

    # Specifically kill the custom_lb.py script if it's running
    # Using pkill to find the process by its script name.
    # This is simpler than managing PID files for this specific case within the existing structure immediately.
    # Make sure this is robust enough or adapt to use PID files later if needed.
    _custom_lb_pids=$(pgrep -f "python3 ${_lib}/custom_lb.py" || true)
    if [[ -n "$_custom_lb_pids" ]] ; then
      _logger "info" \
        "${_FUNCTION_ID}()" \
        "Attempting to kill custom_lb.py processes: $_custom_lb_pids"
      # Using kill directly as DestroyProcess is more for daemons with PID files
      # and specific multitor structure.
      # shellcheck disable=SC2046
      kill $(echo "$_custom_lb_pids") >>"$_log_stdout" 2>&1
      # Brief pause to allow process to terminate
      sleep 0.5
      # Confirm kill
      _custom_lb_pids_after_kill=$(pgrep -f "python3 ${_lib}/custom_lb.py" || true)
      if [[ -z "$_custom_lb_pids_after_kill" ]]; then
        _logger "info" \
          "${_FUNCTION_ID}()" \
          "custom_lb.py process(es) killed successfully."
        kill_status="1"
      else
        _logger "warn" \
          "${_FUNCTION_ID}()" \
          "Failed to kill all custom_lb.py process(es). PIDs remaining: $_custom_lb_pids_after_kill. Forcing kill."
        # shellcheck disable=SC2046
        kill -9 $(echo "$_custom_lb_pids_after_kill") >>"$_log_stdout" 2>&1
        kill_status="1" # Still set kill_status, as an attempt was made.
      fi
    else
      _logger "info" \
        "${_FUNCTION_ID}()" \
        "custom_lb.py process not found, no need to kill."
    fi


    if [[ "$kill_status" -eq 1 ]] ; then

      printf "Multitor processes: \\e[1;31m%s\\e[m\\n" "stop"

    fi

  elif [[ "$show_id_state" -eq 1 ]] ; then

    IFS=" " read -r -a _tor_processes <<< "$(pidof "tor")"

    if [[ ${#_tor_processes[@]} -ne 0 ]] ; then

      if [[ "$socks_port_number" == "all" ]] ; then

        for _tpr in "${_tor_processes[@]}" ; do

          # In this case, we can search for a specific identifier (${_tpr}).
          # shellcheck disable=SC2009
          _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$_tpr")

          IFS=" " read -r -a _proc_socks_num_tmp <<< "$(echo "$_tproc" | awk '{print $13}')"

          _proc_socks_num+=("${_proc_socks_num_tmp[@]}")

        done

        # IFS=$'\n' read -r -a _proc_socks_num_sorted <<< "$(sort <<<"${_proc_socks_num[*]}")"
        # shellcheck disable=SC2207
        _proc_socks_num_sorted=( $( printf "%s\\n" "${_proc_socks_num[@]}" | sort -n ) )

        unset IFS

        for _tpr in "${_proc_socks_num_sorted[@]}" ; do

          # In this case, we can search for a specific identifier (${_tpr}).
          # shellcheck disable=SC2009
          _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$_tpr")

          echo

          # We get process information and display it on the screen.
          GetTorProcess

          if [[ "$socks_port_number" == "all" ]] ; then

            _tor_pid_status="true"

            OutputGen

          elif [[ "$socks_port_number" -eq "$_tor_proc_socks" ]] ; then

            _tor_pid_status="true"

            OutputGen

          else

            _tor_pid_status="false"

            printf "    \\e[1;30msocks_port\\e[m: \\e[1;39m%s\\e[m\\n" "$_tor_proc_socks"
            printf "        \\e[1;30mstatus\\e[m: \\e[1;31m%s\\e[m\\n" "$_tor_pid_status"

          fi

        done

      else

        # In this case, we can search for a specific identifier (${socks_port_number}).
        # shellcheck disable=SC2009
        _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$socks_port_number")

        if [[ -z "$_tproc" ]] ; then

          _sprintf "stop" "not found tor process"

          _logger "stop" \
            "${_FUNCTION_ID}()" \
            "not found tor process"

        else

          echo

          # We get process information and display it on the screen.
          GetTorProcess

          if [[ "$socks_port_number" == "all" ]] ; then

            _tor_pid_status="true"

            OutputGen

          elif [[ "$socks_port_number" -eq "$_tor_proc_socks" ]] ; then

            _tor_pid_status="true"

            OutputGen

          else

            _tor_pid_status="false"

            _sprintf "stop" "not found tor process"

            _logger "stop" \
              "${_FUNCTION_ID}()" \
              "not found tor process"

          fi

        fi

      fi

    else

      _sprintf "stop" "not found tor process"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "not found tor process"

    fi

    echo

  elif [[ "$new_id_state" -eq 1 ]] ; then

    _output_tparams=()

    if [[ "$socks_port_number" == "all" ]] ; then

      IFS=" " read -r -a _tor_processes <<< "$(pidof "tor")"

    else

      _tor_processes=("$socks_port_number")

    fi

    # Password required at this stage.
    read -rsp "Enter password: " _pass_in

    echo

    if [[ ${#_tor_processes[@]} -ne 0 ]] ; then

      for _tpr in "${_tor_processes[@]}" ; do

        # In this case, we can search for a specific identifier (${_tpr}).
        # shellcheck disable=SC2009
        _tproc=$(ps -ax | grep "multitor" | grep ".pid" | grep -v "grep" | grep "$_tpr")

        if [[ -z "$_tproc" ]] ; then

          _logger "warn" \
            "${_FUNCTION_ID}()" \
            "not found or unknown tor process"

        else

          # We get process information.
          GetTorProcess

          if [[ "$socks_port_number" == "all" ]] ; then

            _tor_pid_status="true"

          elif [[ "$socks_port_number" -eq "$_tor_proc_socks" ]] ; then

            _tor_pid_status="true"

          else

            _tor_pid_status="false"

          fi

          # shellcheck disable=SC2154
          _newnym=$(printf "AUTHENTICATE \"%s\"\\r\\nSIGNAL NEWNYM\\nQUIT\\n" "${_pass_in}" \
          | nc 127.0.0.1 "$_tor_proc_control")

          if echo "$_newnym" | grep -qi "250 closing connection" ; then

            _identity_state="true"

          elif echo "$_newnym" | grep -q "Authentication failed" ; then

            _identity_state="false"

          else

            _identity_state="false"

          fi

          _output_tparams+=("$_tor_proc_id":"$_tor_proc_socks":"$_tor_proc_control":"$_identity_state")

        fi

      done

    else

      _sprintf "stop" "not found tor process"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "not found tor process"

    fi

    unset _pass_in

    for i in "${_output_tparams[@]}" ; do

      # shellcheck disable=SC2034
      _key_id=$(echo "$i" | awk -v FS="(:|:)" '{print $1}')
      # shellcheck disable=SC2034
      _key_socks=$(echo "$i" | awk -v FS="(:|:)" '{print $2}')
      # shellcheck disable=SC2034
      _key_control=$(echo "$i" | awk -v FS="(:|:)" '{print $3}')
      # shellcheck disable=SC2034
      _key_state=$(echo "$i" | awk -v FS="(:|:)" '{print $4}')

      if [[ "$_key_state" == "true" ]] ; then

        printf "New identity for \\e[1;39m%d\\e[m: \\e[0;32m%s\\e[m\\n" "$_key_id" "regenerated"

      else

        if [[ "$_tor_pid_status" == "false" ]] ; then

          _logger "warn" \
            "${_FUNCTION_ID}()" \
            "not found or unknown tor process"

          printf "New identity for \\e[1;39m%d\\e[m: \\e[0;31m%s\\e[m\\n" "$_key_id" "unknown"

        else

          printf "New identity for \\e[1;39m%d\\e[m: \\e[0;31m%s\\e[m\\n" "$_key_id" "failed"

        fi

      fi

    done

  fi

  # ````````````````````````````````````````````````````````````````````````````

  # Health monitoring loop
  # Only run if instances were initialized in this script execution
  # if [[ "$init_state" -eq 1 ]] && [[ "${#_running_tor_configs[@]}" -gt 0 ]]; then
  #   _logger "info" \
  #     "${_FUNCTION_ID}()" \
  #     "Starting Tor instance health monitoring loop."

  #   while true; do
  #     _logger "info" \
  #       "${_FUNCTION_ID}()" \
  #       "Performing health check for ${#_running_tor_configs[@]} Tor instances."

  #     local _current_instance_index=0 # Keep track of instance index if needed, though not strictly used in current loop logic
  #     for config_str in "${_running_tor_configs[@]}"; do
  #       # Read the config string into an array
  #       local config_array
  #       IFS=' ' read -r -a config_array <<< "$config_str"

  #       local _cfg_uname="${config_array[0]}"
  #       local _cfg_socks_port="${config_array[1]}"
  #       local _cfg_control_port="${config_array[2]}"

  #       _logger "info" \
  #         "${_FUNCTION_ID}()" \
  #         "Checking health of Tor instance: User=${_cfg_uname}, SOCKS Port=${_cfg_socks_port}, Control Port=${_cfg_control_port}"

  #       # check_tor_instance_health returns 0 for healthy, 1 for unhealthy
  #       if ! check_tor_instance_health "${_cfg_socks_port}"; then
  #         _logger "warn" \
  #           "${_FUNCTION_ID}()" \
  #           "Tor instance on SOCKS port ${_cfg_socks_port} is unhealthy. Attempting restart."

  #         # Before restarting, we need to ensure _pass_hash is available if CreateTorProcess needs it.
  #         # _pass_hash is set globally if init_state is 1.
  #         # If it's not set, CreateTorProcess might fail. This implies the monitoring loop
  #         # should only realistically run if the main script initialized the Tor instances.
  #         # The restart_tor_instance function calls CreateTorProcess which uses the global _pass_hash

  #         restart_tor_instance "${_cfg_uname}" "${_cfg_socks_port}" "${_cfg_control_port}"
  #         local _restart_status=$?

  #         if [[ $_restart_status -eq 0 ]]; then
  #           _logger "info" \
  #             "${_FUNCTION_ID}()" \
  #             "Successfully submitted restart for Tor instance on SOCKS port ${_cfg_socks_port}."
  #           # Note: restart_tor_instance itself calls CreateTorProcess, which might have its own logging.
  #           # The _running_tor_configs array remains valid as the restarted instance uses the same config.
  #         else
  #           _logger "error" \
  #             "${_FUNCTION_ID}()" \
  #             "Failed to restart Tor instance on SOCKS port ${_cfg_socks_port}."
  #         fi
  #       else
  #         _logger "info" \
  #           "${_FUNCTION_ID}()" \
  #           "Tor instance on SOCKS port ${_cfg_socks_port} is healthy."
  #       fi
  #       _current_instance_index=$((_current_instance_index + 1))
  #     done

  #     _logger "info" \
  #       "${_FUNCTION_ID}()" \
  #       "Health check cycle complete. Waiting for 300 seconds."
  #     sleep 300
  #   done
  # elif [[ "$init_state" -eq 1 ]] && [[ "${#_running_tor_configs[@]}" -eq 0 ]]; then
  #   _logger "warn" \
  #     "${_FUNCTION_ID}()" \
  #     "Instances were meant to be initialized, but no successful Tor configurations were stored. Monitoring loop will not start."
  # fi

  if [[ "$time_tracking" == "true" ]] ; then

    # Counting the execution time.
    _endtime=$(date +%s)
    _totaltime=$((_endtime - _begtime))

    # Print time header.
    printf '\\e[m\\e[1;39mTOTAL TIME: %dh:%dm:%ds\\e[m\n' \
            $((_totaltime/3600)) $((_totaltime%3600/60)) $((_totaltime%60))

  fi

  return "$_STATE"

}
